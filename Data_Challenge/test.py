def dfs(node, graph, visited, group_id):
    visited[node] = True
    group[node] = group_id
    for neighbor in graph[node]:
        if not visited[neighbor]:
            dfs(neighbor, graph, visited, group_id)

# Input data
input_data = [
    (1480, 2),
    (3310, 2),
    (4333, 2),
    (391, 17),
    (557, 23),
    (1978, 28),
    (3977, 37),
    (268, 42),
    (4710, 42),
    (4856, 43),
    (4128, 49),
    (1574, 51),
    (188, 61),
    (753, 61),
    (2072, 61),
    (4144, 73),
    (187, 82),
    (815, 84),
    (1001, 85),
    (1012, 85),
    (2192, 82),
    (2331, 84),
    (3074, 82),
    (4148, 84),
    (3687, 89),
    (909, 92),
    (1272, 92),
    (579, 107),
    (1232, 114),
    (4153, 114),
    (4650, 114),
    (205, 122),
    (660, 123),
    (2790, 122),
    (4815, 122),
    (1648, 131),
    (1145, 142),
    (2657, 142),
    (4395, 142),
    (4953, 144),
    (1653, 155),
    (1670, 155),
    (2838, 157),
    (1528, 165),
    (3809, 165),
    (383, 170),
    (61, 188),
    (82, 187),
    (753, 188),
    (2072, 188),
    (2192, 187),
    (2603, 186),
    (3074, 187),
    (3868, 186),
    (4638, 186),
    (862, 194),
    (1706, 193),
    (2619, 195),
    (122, 205),
    (2790, 205),
    (4815, 205),
    (576, 207),
    (1748, 222),
    (2515, 222),
    (3292, 224),
    (3465, 222),
    (1350, 227),
    (564, 251),
    (1311, 251),
    (2332, 253),
    (2957, 253),
    (4431, 255),
    (4648, 251),
    (4831, 253),
    (2647, 256),
    (4173, 257),
    (4178, 257),
    (1996, 263),
    (2954, 265),
    (4759, 263),
    (4828, 263),
    (42, 268),
    (4710, 268),
    (1668, 276),
    (2256, 276),
    (311, 292),
    (370, 292),
    (292, 311),
    (370, 311),
    (2352, 328),
    (2534, 328),
    (374, 335),
    (471, 335),
    (3670, 334),
    (4515, 337),
    (4673, 345),
    (292, 370),
    (311, 370),
    (335, 374),
    (471, 374),
    (1060, 375),
    (3914, 375),
    (3667, 377),
    (4241, 377),
    (170, 383),
    (1103, 385),
    (3965, 385),
    (4916, 385),
    (17, 391),
    (1133, 402),
    (2912, 405),
    (3076, 402),
    (4071, 405),
    (2599, 407),
    (3761, 407),
    (1119, 412),
    (4855, 413),
    (4992, 413),
    (2183, 422),
    (2463, 422),
    (2546, 425),
    (2593, 425),
    (3396, 428),
    (3550, 428),
    (4719, 429),
    (4922, 429),
    (1067, 432),
    (473, 439),
    (661, 439),
    (1815, 439),
    (2396, 439),
    (3895, 444),
    (733, 450),
    (1874, 456),
    (4420, 456),
    (2189, 465),
    (2640, 465),
    (3661, 462),
    (4640, 462),
    (1642, 466),
    (2851, 466),
    (335, 471),
    (374, 471),
    (439, 473),
    (492, 475),
    (661, 473),
    (1271, 475),
    (1517, 475)
]


# Creating adjacency list representation of the graph
graph = {}
for record_id1, record_id2 in input_data:
    if record_id1 not in graph:
        graph[record_id1] = []
    if record_id2 not in graph:
        graph[record_id2] = []
    graph[record_id1].append(record_id2)
    graph[record_id2].append(record_id1)

# Initializing variables
visited = {node: False for node in graph}
group = {}

# Assigning group IDs using DFS
group_id = 1
for node in graph:
    if not visited[node]:
        dfs(node, graph, visited, group_id)
        group_id += 1

# Output
print("record_id1\tgroup_id")
for record_id in sorted(group.keys()):
    print(f"{record_id}\t\t{group[record_id]}")
